/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reporter;

import reporter.EncounterReporter ;
import community.Community ;
import community.Relationship ;

import java.lang.reflect.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays ;
import java.util.HashMap ;
import java.util.Collections ;
import java.util.Collection ;
import java.util.logging.Level;


/**
 *
 * @author MichaelWalker
 */
public class RelationshipReporter extends Reporter {
    
    static String DEATH = "death" ;
    static String BIRTH = "birth" ;
    static String AGE = "age" ;
    //static String RELATIONSHIP_ID = Relationship.RELATIONSHIP_ID ;
    
    static protected HashMap<String,Object> REPORTS = new HashMap<String,Object>() ;
    
    static protected Collection GET_REPORT_NAMES()
    {
        return REPORTS.keySet() ;
    }
    
    /**
     * If report already in REPORTS then returns it, otherwise generates it from
     * Method prepareReportName() and stores it for later first ;
     * @param reportName
     * @param relationshipReporter
     * @return (Object) Report generated by prepareReportName()
     */
    static protected Object GET_REPORT(String reportName, RelationshipReporter relationshipReporter)
    {
        if (!REPORTS.containsKey(reportName))
        {
            String methodName = "prepare" 
                    + reportName.substring(0,1).toUpperCase() 
                    + reportName.substring(1) ;
            
            try
            {
                Method prepareMethod = RelationshipReporter.class.getDeclaredMethod(methodName) ;
                REPORTS.put(reportName, prepareMethod.invoke(relationshipReporter)) ;
            }
            catch ( Exception e )
            {
                LOGGER.info(e.toString()) ;
            }
            
        }
        return REPORTS.get(reportName) ;
    }
    
    public RelationshipReporter()
    {
        
    }
    
    public RelationshipReporter(String simName, ArrayList<String> report) 
    {
        super(simName, report);
    }

    /**
     * @param simName (String) Root of simulation name.
     * @param reportFilePath (String) Path to saved files.
     */
    public RelationshipReporter(String simName, String reportFilePath)
    {
        super(simName, reportFilePath) ;
    }
    
    /**
     * 
     * @return ArrayList of ArrayLists of (String) RelationshipIds of relationships
     * commenced in each cycle
     */
    public ArrayList<ArrayList<Object>> prepareRelationshipCommenceReport()
    {
        return prepareRelationshipCommenceReport("") ;
    }
    
    public ArrayList<ArrayList<Object>> prepareRelationshipCommenceReport(String relationshipClassName)
    {
        ArrayList<ArrayList<Object>> relationshipCommenceReport = new ArrayList<ArrayList<Object>>() ;
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        // Restrict consideration to specified Relationship.class
        if (!relationshipClassName.isEmpty())
            commenceReport = filterReport("relationship",relationshipClassName,RELATIONSHIPID,commenceReport) ;
        
        for (int recordNb = 0 ; recordNb < commenceReport.size() ; recordNb++ )
        {
            String record = commenceReport.get(recordNb) ;
            //LOGGER.info(record);
            //int startIndex = indexOfProperty(RELATIONSHIPID,record) ;
            relationshipCommenceReport.add(extractAllValues(RELATIONSHIPID, record,0)) ;
        }
        return relationshipCommenceReport ;
    }
    
    /**
     * 
     * @return ArrayList of ArrayLists of (String) RelationshipIds of relationships
     * of class relationshipClazz commenced in each cycle
     */
    public ArrayList<ArrayList<Object>> prepareRelationshipCommenceReport(String[] relationshipClazzes)
    {
        ArrayList<ArrayList<Object>> relationshipCommenceReport = new ArrayList<ArrayList<Object>>() ;
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        String filteredRecord ;
        
        for (int reportNb = 0 ; reportNb < commenceReport.size() ; reportNb++ )
        {
            String record = commenceReport.get(reportNb) ;
            
            // Include only selected Relationships 
            filteredRecord = "" ;
            for (String relationshipClazz : relationshipClazzes)
                filteredRecord += boundedStringByValue("relationship",relationshipClazz,RELATIONSHIPID,record) ;
            if (filteredRecord.isEmpty())
                filteredRecord = record ;
            //LOGGER.info(record);
            //int startIndex = indexOfProperty(RELATIONSHIPID,record) ;
            relationshipCommenceReport.add(extractAllValues(RELATIONSHIPID, filteredRecord,0)) ;
            //relationshipCommenceReport.add(extractAllValues(AGENTID1, record,0)) ;
        }
        return relationshipCommenceReport ;
    }
    
    /**
     * 
     * @return ArrayList of ArrayLists of (String) RelationshipIds of relationships
     * that break up in each cycle
     */
    public ArrayList<ArrayList<Object>> prepareRelationshipBreakupReport()
    {
        ArrayList<ArrayList<Object>> relationshipBreakupReport = new ArrayList<ArrayList<Object>>() ;
        
        ArrayList<String> breakupReport = (ArrayList<String>) getReport("breakup",this) ; // prepareBreakupReport() ;
        
        for (int reportNb = 0 ; reportNb < breakupReport.size() ; reportNb++ )
        {
            String report = breakupReport.get(reportNb) ;
            relationshipBreakupReport.add(extractAllValues(RELATIONSHIPID, report,0)) ;
            //relationshipBreakupReport.add(extractAllValues(AGENTID1, record,0)) ;
        }
        return relationshipBreakupReport ;
    }
    
    /**
     * 
     * @return ArrayList of ArrayLists of (String) agentIds of Agents commencing 
     * relationships in each cycle.
     */
    public ArrayList<ArrayList<Object>> prepareAgentCommenceReport()
    {
        ArrayList<ArrayList<Object>> agentCommenceReport = new ArrayList<ArrayList<Object>>() ;
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        
        for (int recordNb = 0 ; recordNb < commenceReport.size() ; recordNb++ )
        {
            String record = commenceReport.get(recordNb) ;
            //LOGGER.info(record);
            //int startIndex = indexOfProperty(RELATIONSHIPID,record) ;
            ArrayList<Object> agentCommenceRecord = extractAllValues(AGENTID0,record,0) ;
            agentCommenceRecord.addAll(extractAllValues(AGENTID1,record,0)) ;
            
            agentCommenceReport.add((ArrayList<Object>) agentCommenceRecord.clone()) ;
        }
        return agentCommenceReport ;
    }
    
    /**
     * 
     * @param encounterReporter
     * @return (HashMap) relationshipId maps to number of associated transmissions 
     */
    public HashMap<Object,Number> prepareRelationshipTransmissionReport(EncounterReporter encounterReporter)
    {
        HashMap<Object,Number> relationshipTransmissionReport = new HashMap<Object,Number>() ;
        
        ArrayList<String> encounterReport = encounterReporter.getFullInput() ;
        String encounterRecord ;
        String transmission = "transmission" ;
        ArrayList<String> encounterArray ; 
        ArrayList<Object> transmissionArray ; 
        String[] agentIds ;
        String[] encounterAgentIds ;  // For Agents in encounter
        
        HashMap<Object,String[]> relationshipAgentReport 
                = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // prepareRelationshipAgentReport() ;
        
        // When did each Relationship commence?
        ArrayList<ArrayList<Object>> relationshipCommenceReport 
                = prepareRelationshipCommenceReport() ;
        // When did each Relationship break-up? Used for efficiency.
        ArrayList<ArrayList<Object>> relationshipBreakupReport 
                = prepareRelationshipBreakupReport() ;
        // relationshipId -> commencement cycle
        ArrayList<Object> currentRelationshipIds = new ArrayList<Object>() ;
        //for (boolean nextInput = true ; nextInput ; nextInput = updateReport())
        int nbCycles = encounterReport.size() ;
        //LOGGER.info(String.valueOf(nbCycles));
        for (int cycle = 0 ; cycle < nbCycles ; cycle++ )
        {
            for (Object relationshipId : relationshipCommenceReport.get(cycle))
                currentRelationshipIds.add(relationshipId) ;
            encounterRecord = encounterReport.get(cycle) ;
            encounterArray = extractArrayList(encounterRecord,transmission) ;
            for (String encounter : encounterArray)
            {
                transmissionArray = extractAllValues(transmission,encounter,0) ;
                if (transmissionArray.contains(TRUE))
                {
                    encounterAgentIds = extractAgentIds(encounter) ;
                    for (Object relationshipId : currentRelationshipIds)
                    {
                        String[] relationshipAgentIds = relationshipAgentReport.get(relationshipId) ;
                        if (relationshipAgentIds[0].equals(encounterAgentIds[0]) && relationshipAgentIds[1].equals(encounterAgentIds[1]))
                        {
                            relationshipTransmissionReport = incrementHashMap(relationshipId,relationshipTransmissionReport) ;
                            continue ;
                        }
                        if (relationshipAgentIds[1].equals(encounterAgentIds[0]) && relationshipAgentIds[0].equals(encounterAgentIds[1]))
                        {
                            relationshipTransmissionReport = incrementHashMap(relationshipId,relationshipTransmissionReport) ;
                            continue ;
                        }
                    }
                }
            }
            for (Object relationshipId : relationshipBreakupReport.get(cycle))
                currentRelationshipIds.remove(relationshipId) ;
            
        }
        return relationshipTransmissionReport ;
    }
    
    /**
     * 
     * @param encounterReporter
     * @return (HashMap) Number of Relationships responsible for a given number 
     * or more transmissions.
     */
    public HashMap<Object,Number> prepareRelationshipCumulativeTransmissionReport(EncounterReporter encounterReporter)
    {
        HashMap<Object,Number> cumulativeRelationshipTransmissionReport = new HashMap<Object,Number>() ;

        HashMap<Object,Number> relationshipTransmissionReport = prepareRelationshipTransmissionReport(encounterReporter) ;
        
        Collection<Number> relationshipTransmissionValues = relationshipTransmissionReport.values() ;
        
        int maxValue = 0 ;
        int intValue = 0 ;
        for (Number value : relationshipTransmissionValues)
        {
            intValue = value.intValue() ;
            if (intValue > maxValue)
                maxValue = intValue ;
        }
        //Collections.max(relationshipTransmissionValues) ;
        
        // To track how agentIds have had more than given Relationships
        int relationshipsOver = 0 ;
        
        for (int key = maxValue ; key > 0 ; key-- )
        {
            relationshipsOver += Collections.frequency(relationshipTransmissionValues,key) ;
            cumulativeRelationshipTransmissionReport.put(key, relationshipsOver) ;
        }
        
        return cumulativeRelationshipTransmissionReport ;
    }        
   
    
    /**
     * Finds last relationshipId entered into for each agentId, then finds last
     * relationshipId broken off that is different from the last entered into
     * @return (HashMap) agentId maps to cycle of last commencement minus that of last 
     * breakup.
     */
    public HashMap<Object,Number> prepareAgentGapReport()
    {
        HashMap<Object,Number> agentGapReport = new HashMap<Object,Number>() ;
        
        // Latest cycle for agentId commencing relationship
        HashMap<Object,Integer> agentLatestCommencement = new HashMap<Object,Integer>() ;
        // Latest cycle for agentId ending relationship different from latest commencement
        HashMap<Object,Integer> agentLatestBreakup = new HashMap<Object,Integer>() ;
        // relaitonshipId of last Relationship to commence for each agentId
        HashMap<Object,String> agentLastRelationship = new HashMap<Object,String>() ;
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        ArrayList<String> breakupReport = (ArrayList<String>) getReport("breakup",this) ; //  prepareBreakupReport() ;
        HashMap<Object,String[]> relationshipAgentReport = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // prepareRelationshipAgentReport() ;
            
        
        String breakupRecord ;
        String relationshipId ;
        String[] agentIds ; 
                
        for (int index = commenceReport.size() - 1 ; index >= 0 ; index-- )
        {
            // Find last Relationship commencement
            String commenceRecord = commenceReport.get(index) ;
            ArrayList<String> relationshipArray = extractArrayList(commenceRecord,RELATIONSHIPID) ;
            for (String relationshipString : relationshipArray)
            {
                for (String propertyName : new String[] {AGENTID0,AGENTID1})
                {
                    Object agentId = extractValue(propertyName,relationshipString) ;
                    if (agentLatestCommencement.putIfAbsent(agentId, index) == null)
                        agentLastRelationship.put(agentId, extractValue(RELATIONSHIPID,relationshipString)) ;
                }
            }
            LOGGER.info(String.valueOf(index)+":");
            // Find last Relationship breakup
            try
            {
                breakupRecord = breakupReport.get(index);
                relationshipArray = extractArrayList(breakupRecord,RELATIONSHIPID) ;
            }
            catch ( Exception e )
            {
                LOGGER.log(Level.INFO,"{0}", breakupReport) ;
                assert(false) ;
            }
            for (String relationshipString : relationshipArray)
            {
                relationshipId = extractValue(RELATIONSHIPID,relationshipString);
                agentIds = relationshipAgentReport.get(relationshipId) ;
                if (agentIds == null)  // TODO: Make unnecessary by saving and reading burn-in
                    continue ;
                for (String agentId : agentIds)
                    if (!relationshipId.equals(agentLastRelationship.get(agentId)))
                        agentLatestBreakup.putIfAbsent(agentId, index) ;
            }
            
        }
        
        // Find gap between relationships
        for (Object agentId : agentLatestBreakup.keySet())
            agentGapReport.put(agentId, agentLatestCommencement.get(agentId) - agentLatestBreakup.get(agentId)) ;
        
        return agentGapReport ;
    }
    
    /**
     * @return A snapshot of how many agentIds had gaps of a given magnitude 
     * or greater between their final two relationships
     */
    public HashMap<Object,Number> prepareRelationshipCumulativeGapRecord()
    {
        HashMap<Object,Number> cumulativeRelationshipGapRecord = new HashMap<Object,Number>() ;

        HashMap<Object,Number> agentGapReport = prepareAgentGapReport() ;
        
        Collection<Number> agentGapValues = agentGapReport.values() ;
        
        int intValue ;
        int maxValue = 0 ;
        for (Number value : agentGapValues) 
        {
            intValue = value.intValue() ;
            if (intValue > maxValue)
                maxValue = intValue ;
        }
        
        int minValue = maxValue ; 
        for (Number value : agentGapValues)
        {
            intValue = value.intValue() ;
            if (intValue < minValue)
                minValue = intValue ;
        }
        
        // To track how agentIds have had more than given Relationships
        int agentsOver = 0 ;
        
        for (int key = maxValue ; key > 0 ; key-- )
        {
            agentsOver += Collections.frequency(agentGapValues,key) ;
            cumulativeRelationshipGapRecord.put(key, agentsOver) ;
        }
        
        agentsOver = 0 ;
        for (int key = minValue ; key < 0 ; key++ )
        {
            agentsOver += Collections.frequency(agentGapValues,key) ;
            cumulativeRelationshipGapRecord.put(key, agentsOver) ;
        }
        
        return cumulativeRelationshipGapRecord ;
    }
    
    
    /**
     * 
     * @return ArrayList of ArrayLists of (String) AgentIds in a relationship
     * that broke up in a given cycle.
     */
    public ArrayList<ArrayList<String>> prepareAgentBreakupReport()
    {
        ArrayList<ArrayList<String>> agentBreakupReport = new ArrayList<ArrayList<String>>() ;
        ArrayList<String> agentBreakupRecord ;
        ArrayList<String> breakupReport = (ArrayList<String>) getReport("breakup",this) ; //   prepareBreakupReport() ;
        HashMap<Object,String[]> relationshipAgentIds = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // prepareRelationshipAgentReport() ;
        String record ;
        String relationshipId ;
        String[] agentIds ;
            
        for (int recordNb = 0 ; recordNb < breakupReport.size() ; recordNb++ )
        {
            agentBreakupRecord = new ArrayList<String>() ;
            record = breakupReport.get(recordNb);
            ArrayList<String> relationshipRecords = extractArrayList(RELATIONSHIPID,record) ;
            for (String relationship : relationshipRecords)
            {
                relationshipId = extractValue(RELATIONSHIPID,record);
                agentIds = extractAgentIds(record,0);
                agentBreakupRecord.addAll(Arrays.asList(agentIds));
            }
            agentBreakupReport.add((ArrayList<String>) agentBreakupRecord.clone()) ;
        }
        return agentBreakupReport ;
    }
    
    /**
     * 
     * @return (HashMap) relationshipId -> [agentIds]
     */
    public HashMap<Object,String[]> prepareRelationshipAgentReport()
    {
        HashMap<Object,String[]> relationshipAgentReport = new HashMap<Object,String[]>() ;
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        ArrayList<String> relationshipRecords ;
        String relationshipId ;
        String[] agentIds = new String[2] ;
        
        for (String record : commenceReport)
        {
            relationshipRecords = extractArrayList(record,RELATIONSHIPID) ;
            for (String relationshipRecord : relationshipRecords)
            {
                relationshipId = extractValue(RELATIONSHIPID,relationshipRecord) ;
                agentIds = extractAgentIds(relationshipRecord,0) ;
                relationshipAgentReport.put(relationshipId, agentIds) ;
            }
        }
        return relationshipAgentReport ;
    }
    
    /**
     * 
     * @return (HashMap) length-at-breakup maps to number of Relationships of 
     * corresponding length
     */
    public HashMap<Object,Number> prepareLengthAtBreakupReport()
    {
        HashMap<Object,Number> lengthAtBreakupMap = new HashMap<Object,Number>() ;
        
        // relationshipId -> length of Relationship
        HashMap<Object,Integer> relationshipLengthReport = prepareRelationshipLengthReport() ;
        
        for (Object relationshipId : relationshipLengthReport.keySet())
        {
            int length = relationshipLengthReport.get(relationshipId) ;
            lengthAtBreakupMap = incrementHashMap(length,lengthAtBreakupMap) ;
        }
        
        return lengthAtBreakupMap ;
    }
    
    /**
     * 
     * @return (HashMap) key is String.valueOf(relationshipId) and value is the 
     * number of cycles the corresponding Relationship went for.
     */
    public HashMap<Object,Integer> prepareRelationshipLengthReport()
    {
        HashMap<Object,Integer> relationshipLengthMap = new HashMap<Object,Integer>() ;
        
        ArrayList<ArrayList<Object>> relationshipCommenceReport = prepareRelationshipCommenceReport() ;
        ArrayList<ArrayList<Object>> relationshipBreakupReport = prepareRelationshipBreakupReport() ;
        
        // Which Relationships commenced in cycle index
        for (int index = 0 ; index < relationshipCommenceReport.size() ; index++ )
        {
            ArrayList<Object> commenceRecord = relationshipCommenceReport.get(index) ;
            
            for (Object relationshipId : commenceRecord)
                relationshipLengthMap.put(relationshipId, -index) ;
        }
        for (int index = 0 ; index < (relationshipBreakupReport.size() ) ; index++ )
        {
            // key relationshipId must have commenced already, with value -ve start cycle
            ArrayList<Object> breakupRecord = relationshipBreakupReport.get(index) ;
            
            for (Object relationshipId : breakupRecord)
            {
                int commenceIndex = relationshipLengthMap.get(relationshipId) ;
                relationshipLengthMap.put(relationshipId, index + commenceIndex + 1) ;    // +1 because breakup is done in same cycle
            }
        }
        
        // RelationshipLengthMap < 0 for Relationships that are still ongoing at the end of the simulation.
        for (Object relationshipId : relationshipLengthMap.keySet())
            if (!(relationshipLengthMap.get(relationshipId) > 0))
            {
                int newValue = relationshipLengthMap.get(relationshipId) + Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) + 1 ;
                relationshipLengthMap.put(relationshipId, newValue) ;
            }
        
        return relationshipLengthMap ;
    }
    
    /**
     * 
     * @return Report of mean of minimum number of each subclass of Relationship 
     * to date.
     */
    public ArrayList<HashMap<Object,Object>> prepareMeanCumulativeRelationshipReport(String[] relationshipClassNames)
    {
        ArrayList<HashMap<Object,Object>> meanCumulativeRelationshipReport 
                = new ArrayList<HashMap<Object,Object>>() ;
        
        HashMap<Object,Object> meanCumulativeRelationshipClassReport ;
        
        int population = Integer.valueOf(getMetaDatum("Community.POPULATION")) ;
        
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentsCumulativeRelationshipReport 
                = prepareAgentsCumulativeRelationshipReport(relationshipClassNames) ;
        
        for (HashMap<Object,HashMap<Object,Integer>> record : agentsCumulativeRelationshipReport)
        {
            meanCumulativeRelationshipClassReport = new HashMap<Object,Object>() ;
            for (Object relationshipClassName : record.keySet())
            {
                int sum = 0 ;
                for (Object agentId : record.get(relationshipClassName).keySet())
                    sum += record.get(relationshipClassName).get(agentId) ;
                meanCumulativeRelationshipClassReport.put(relationshipClassName,((double) sum)/population) ; // record.keySet().size()) ;
            }
            meanCumulativeRelationshipReport.add((HashMap<Object,Object>) meanCumulativeRelationshipClassReport.clone()) ;
        }
        return meanCumulativeRelationshipReport ;
    }
    
    /**
     * TODO: Include length one and then plot on a log-scale.
     * @return A snapshot of how many agentIds have more had how many or more Relationships
     */
    public HashMap<Object,Number> prepareCumulativeLengthReport()
    {
        HashMap<Object,Number> cumulativeRelationshipLengthReport = new HashMap<Object,Number>() ;
        
        //TODO: Separate out action on individual RECORD
        //ArrayList<HashMap<Object,Integer>> agentsCumulativeRelationshipReport 
          //      = prepareAgentsCumulativeRelationshipReport() ;
        
        HashMap<Object,Number> lengthAtBreakupReport = prepareLengthAtBreakupReport() ;
        
        // Find maximum relationship length
        int maxValue = 0 ;
        int lengthValue ;
        for (Object lengthObject : lengthAtBreakupReport.keySet())
        {
            lengthValue = Integer.valueOf(String.valueOf(lengthObject)) ;
            if (lengthValue > maxValue)
                maxValue = lengthValue ;
        }
        
        int relationshipsUnder = 0 ;
        for (int lengthKey = maxValue ; lengthKey > 1 ; lengthKey-- )
        {
            if (lengthAtBreakupReport.containsKey(lengthKey))
                relationshipsUnder += (Integer) lengthAtBreakupReport.get(lengthKey) ;
            cumulativeRelationshipLengthReport.put(lengthKey, relationshipsUnder) ;
        }
        return cumulativeRelationshipLengthReport ;
    }
    
    /**
     * @return A snapshot of how many agentIds have more had how many or more Relationships
     */
    public HashMap<Object,HashMap<Object,Number>> prepareCumulativeRelationshipRecord(String[] relationshipClassNames)
    {
        HashMap<Object,HashMap<Object,Number>> cumulativeRelationshipRecord 
                = new HashMap<Object,HashMap<Object,Number>>() ;
        for (String relationshipClassName : relationshipClassNames)
            cumulativeRelationshipRecord.put(relationshipClassName, new HashMap<Object,Number>()) ;
        
        //TODO: Separate out action on individual RECORD
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentsCumulativeRelationshipReport 
                = prepareAgentsCumulativeRelationshipReport(relationshipClassNames) ;
        
        HashMap<Object,HashMap<Object,Integer>> agentsCumulativeRelationshipRecord 
                = agentsCumulativeRelationshipReport.get(agentsCumulativeRelationshipReport.size()-1) ;
        
        
        for (Object relationshipClassName : relationshipClassNames)
        {
            Collection<Integer> agentsCumulativeRelationshipValues 
                    = agentsCumulativeRelationshipRecord.get(relationshipClassName).values() ;

            int maxValue = Collections.max(agentsCumulativeRelationshipValues) ;

            // To track how agentIds have had more than given Relationships
            int agentsOver = 0 ;

            for (int key = maxValue ; key > 0 ; key-- )
            {
                agentsOver += Collections.frequency(agentsCumulativeRelationshipValues,key) ;
                cumulativeRelationshipRecord.get(relationshipClassName).put(key, agentsOver) ;
            }
        }
        return cumulativeRelationshipRecord ;
    }
    
    /**
     * 
     * @return Report with relationshipClassName maps to 
     * (HashMap showing how many Relationships each agentId has entered into so far).
     */
    private ArrayList<HashMap<Object,HashMap<Object,Integer>>> 
        prepareAgentsCumulativeRelationshipReport(String[] relationshipClassNames)
    {
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentsCumulativeRelationshipReport 
                = new ArrayList<HashMap<Object,HashMap<Object,Integer>>>() ;
        
        // Keeps track of cumulative number of Relationships per agentId
        HashMap<Object,HashMap<Object,Integer>> agentCumulativeRelationships 
                = new HashMap<Object,HashMap<Object,Integer>>() ;
        for (String relationshipClassName : relationshipClassNames)
            agentCumulativeRelationships.put(relationshipClassName, new HashMap<Object,Integer>()) ;
        
        ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> agentsEnteredRelationshipReport 
                = prepareAgentsEnteredRelationshipReport(relationshipClassNames) ;
        
        for (HashMap<Object,HashMap<Object,ArrayList<Object>>> record : agentsEnteredRelationshipReport )
        {
            for (Object relationshipClassName : relationshipClassNames)
            {
                for (Object agentId : record.get(relationshipClassName).keySet())
                {
                    int sumSoFar = 0 ;
                    if (agentCumulativeRelationships.get(relationshipClassName).containsKey(agentId))
                        sumSoFar = agentCumulativeRelationships.get(relationshipClassName).get(agentId) ;
                    agentCumulativeRelationships.get(relationshipClassName).put(agentId, record.get(relationshipClassName).get(agentId).size() + sumSoFar) ;
                }
            }
            agentsCumulativeRelationshipReport.add(agentCumulativeRelationships) ;
        }
        return agentsCumulativeRelationshipReport ;
    }
    
    /**
     * 
     * @return (ArrayList) records of mean number of each Relationship class per Agent
     */
    public ArrayList<HashMap<Object,Number>> prepareMeanNumberRelationshipsReport(String[] relationshipClassNames)
    {
        ArrayList<HashMap<Object,Number>> meanNumberRelationshipsReport = new ArrayList<HashMap<Object,Number>>() ;
        
        HashMap<Object,Object> meanRelationshipClassReport = new HashMap<Object,Object>() ;
        
        //ArrayList<Object> populationReport = (new PopulationReporter("",input)).preparePopulationReport() ;
        
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentNumberRelationshipsReport
                = prepareAgentNumberRelationshipsReport(relationshipClassNames) ;
        int population = Integer.valueOf(getMetaDatum("Community.POPULATION")) ; // = Integer.valueOf(extractValue("Population", (String) populationReport.get(recordIndex))) ;

        //for (int recordIndex = 0 ; recordIndex < agentNumberRelationshipsReport.size() ; recordIndex++ )
        //{
        for ( HashMap<Object,HashMap<Object,Integer>> record : agentNumberRelationshipsReport) // .get(recordIndex) ;
        {
            // Loop over Relationship classes
            for (Object relationshipClassName : record.keySet())
            {
                int sum = 0 ;
                meanRelationshipClassReport = new HashMap<Object,Object>() ;
                // Sum over Agents
                for (Object agentId : record.get(relationshipClassName).keySet())
                    sum += record.get(relationshipClassName).get(agentId) ; // Integer.valueOf(String.valueOf(number)) ;
   
                meanRelationshipClassReport.put(relationshipClassName,((double) sum)/population) ;  // (Object) "Mean number of partners:" + 
            }
            meanNumberRelationshipsReport.add((HashMap<Object,Number>) meanRelationshipClassReport.clone()) ;
        }
        return meanNumberRelationshipsReport ;
    }
    
    /**
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to mean number of
     * Relationships of given class per agentId involved in during given time period).
     */
    public HashMap<Object,Number> 
        prepareAgentRelationshipsMean(String[] relationshipClassNames, int backYears, int backMonths, int backDays) 
        {
            int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            return prepareAgentRelationshipsMean(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        }
    
    
    /**
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to mean number of
     * Relationships of given class per agentId involved in during given time period).
     */
    public HashMap<Object,Number> 
        prepareAgentRelationshipsMean(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle) 
    {
        HashMap<Object,Number> agentRelationshipsMean = new HashMap<Object,Number>() ;
        
        HashMap<Object,HashMap<Object,Integer>> agentRelationshipsCount 
            = prepareAgentRelationshipsCount(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        
        double population = Double.valueOf(getMetaDatum("Community.POPULATION")) ;
        
        HashMap<Object,Integer> relationshipClazzCount ;
        int total ;
        for (String relationshipClazzName : relationshipClassNames)
        {
            relationshipClazzCount = agentRelationshipsCount.get(relationshipClazzName) ;
            total = 0 ;
            
            for (int nbRelationships : relationshipClazzCount.values())
                total += nbRelationships ;
            
            agentRelationshipsMean.put(relationshipClazzName, total/population) ;
        }
        
        return agentRelationshipsMean ;
    
    }
        
    /**
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @param lastYear
     * @return (HashMap) year of interest maps to (Number[]) Array of mean number of
     * Relationships of each relationshipClassName involved in per agentId during 
     * backMonths months, backDays days for each of backYears years counting back 
     * from lastYear).
     */
    public HashMap<Object,Number[]> 
        prepareAgentRelationshipsMeanYears(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int lastYear) 
        {
            HashMap<Object,Number[]> agentRelationshipsMeanYears = new HashMap<Object,Number[]>() ;
            
            int maxCycles = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            
            int endCycle ;
            HashMap<Object,Number> agentRelationshipsMean ;
            for (int year = 0 ; year < backYears ; year++ )
            {
                Number[] yearlyAgentRelationshipsMean = new Number[relationshipClassNames.length] ;
               
                endCycle = maxCycles - year * DAYS_PER_YEAR ;
                agentRelationshipsMean = prepareAgentRelationshipsMean(relationshipClassNames, 0, backMonths, backDays, endCycle);
               
                for (int classIndex = 0 ; classIndex < relationshipClassNames.length ; classIndex++ )
                    yearlyAgentRelationshipsMean[classIndex] = agentRelationshipsMean.get(relationshipClassNames[classIndex]) ;
                
                agentRelationshipsMeanYears.put(lastYear - year, (Number[]) yearlyAgentRelationshipsMean.clone()) ;
            }
            
            return agentRelationshipsMeanYears ;
        }
    
    
    
    /**
     * Calls prepareAgentRelationshipsRecord() and counts the Relationships.
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to (agentId maps to number of
     * Relationships of given class involved in during given time period).
     */
    public HashMap<Object,HashMap<Object,Integer>> 
        prepareAgentRelationshipsCount(String[] relationshipClassNames, int backYears, int backMonths, int backDays) 
        {
            int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            return prepareAgentRelationshipsCount(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        }
    
    
    /**
     * Calls prepareAgentRelationshipsRecord() and counts the Relationships.
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to (agentId maps to number of
     * Relationships of given class involved in during given time period).
     */
    public HashMap<Object,HashMap<Object,Integer>> 
        prepareAgentRelationshipsCount(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle) 
    {
        HashMap<Object,HashMap<Object,Integer>> agentRelationshipsCount
            = new HashMap<Object,HashMap<Object,Integer>>() ;
        for (String relationshipClassName : relationshipClassNames)
            agentRelationshipsCount.put(relationshipClassName, new HashMap<Object,Integer>()) ;
        
        // Prepare agentRelationshipsRecord
        // Class[] parameterClazzes = new Class[] {String[].class,int.class,int.class,int.class,int.class} ;
        //Object[] parameters = new Object[] {relationshipClassNames, backYears, backMonths, backDays, endCycle} ;
        HashMap<Object,HashMap<Object,ArrayList<Object>>> agentRelationshipsRecord 
        = prepareAgentRelationshipsRecord(relationshipClassNames, backYears, backMonths, backDays, endCycle)  ;
        //    = (HashMap<Object,HashMap<Object,ArrayList<Object>>>) getRecord("agentRelationships",this,parameterClazzes,parameters) ;
        
        HashMap<Object,ArrayList<Object>> agentRelationships ;
        int count ;
        
        for (Object relationshipClassName : agentRelationshipsRecord.keySet())
        {
            if (!Arrays.asList(relationshipClassNames).contains(relationshipClassName))
                continue ;
            agentRelationships = agentRelationshipsRecord.get(relationshipClassName);
            for (Object agentId : agentRelationships.keySet())
            {
                count = agentRelationships.get(agentId).size();
                agentRelationshipsCount.get(relationshipClassName).put(agentId, count) ;
            }
        }
        return agentRelationshipsCount ;
    }
        
    /**
     * All Relationships entered except for those broken up before given period.
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to (agentId maps to relationshipIds 
     * involved in during specified time period).
     */
    public HashMap<Object,HashMap<Object,ArrayList<Object>>> 
        prepareAgentRelationshipsRecord(String[] relationshipClassNames, int backYears, int backMonths, int backDays) 
        {
            int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            return prepareAgentRelationshipsRecord(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        }
    
        
    /**
     * All Relationships entered except for those broken up before given period.
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @param endCycle
     * @return (HashMap) relationshipClassName maps to (agentId maps to relationshipIds 
     * involved in during specified time period).
     */
    public HashMap<Object,HashMap<Object,ArrayList<Object>>> 
        prepareAgentRelationshipsRecord(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle) 
    {
        HashMap<Object,HashMap<Object,ArrayList<Object>>> agentRelationshipsRecord 
                = new HashMap<Object,HashMap<Object,ArrayList<Object>>>() ;
        for (String relationshipClassName : relationshipClassNames)
            agentRelationshipsRecord.put(relationshipClassName, new HashMap<Object,ArrayList<Object>>()) ;
        
        int backCycles = getBackCycles(backYears, backMonths, backDays, endCycle) ;
        
        ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> agentsEnteredRelationshipReport 
         = prepareAgentsEnteredRelationshipReport(relationshipClassNames, 0, 0, endCycle) ;
        
        for (HashMap<Object,HashMap<Object,ArrayList<Object>>> record : agentsEnteredRelationshipReport)
            for (Object relationshipClassName : relationshipClassNames)
            {
                HashMap<Object,ArrayList<Object>> agentRelationshipClassRecord = record.get(relationshipClassName) ;
                for (Object agentId : agentRelationshipClassRecord.keySet())
                {
                    for (Object relationshipId : agentRelationshipClassRecord.get(agentId))
                        agentRelationshipsRecord.put(relationshipClassName,
                            updateHashMap(agentId,relationshipId,agentRelationshipsRecord.get(relationshipClassName),false)) ;
                }
            }
        // Remove relationshipIds which have broken up.
        ArrayList<String> breakupReport = (ArrayList<String>) getReport("breakup",this) ; //   prepareBreakupReport() ;
        // relationshipId maps to relationshipClassName
        HashMap<Object,String> relationshipClazzReport = prepareRelationshipClazzReport() ;
        // relationshipId maps to (String[]) agentIds
        HashMap<Object,String[]> relationshipAgentReport = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // prepareRelationshipAgentReport() ;
        //LOGGER.log(Level.INFO, "endCycle:{0} relationshipAgent-{1}", new Object[] {endCycle,relationshipAgentReport});
        
        String relationshipClassName ;
        int enterCycle = endCycle - backCycles ;
        String breakupRecord ; 
        ArrayList<Object> relationshipIdList ;
        for (int enteredIndex = 0 ; enteredIndex < enterCycle ; enteredIndex++ )
        {
            breakupRecord = breakupReport.get(enteredIndex);
            relationshipIdList = extractAllValues(RELATIONSHIPID,breakupRecord);
            for (Object relationshipId : relationshipIdList)
            {
                // Get relationshipId relationshipClass
                relationshipClassName = relationshipClazzReport.get(relationshipId) ;
                //LOGGER.log(Level.INFO,"enteredIndex:{0} {1}", new Object[] {enteredIndex,agentRelationshipsRecord.get(relationshipClassName)}) ;
                if (agentRelationshipsRecord.get(relationshipClassName)!= null) ;
                    for (String agentId : relationshipAgentReport.get(relationshipId))
                        agentRelationshipsRecord.get((Object) relationshipClassName).get(agentId).remove(relationshipId) ;
            }
        }
        return agentRelationshipsRecord ;
    }
        
    /**
     * 
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to the number of Agents involved in 
     * given class of Relationship during the specified period.
     */
    public HashMap<Object,Number> prepareNumberRelationshipsReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays)
    {
        int endCycle = getMaxCycles() ; 
        
        return prepareNumberRelationshipsReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
    }
    
        
    /**
     * 
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to the number of Agents involved in 
     * given class of Relationship during the specified period.
     */
    public HashMap<Object,Number> prepareNumberRelationshipsReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle)
    {
        HashMap<Object,Number> numberRelationshipsReport = new HashMap<Object,Number>() ;
        
        // Prepare agentRelationshipsRecord
        Class[] parameterClazzes = new Class[] {String[].class,int.class,int.class,int.class,int.class} ;
        Object[] parameters = new Object[] {relationshipClassNames, backYears, backMonths, backDays, endCycle} ;
        HashMap<Object,HashMap<Object,ArrayList<Object>>> agentRelationshipsRecord
            = (HashMap<Object,HashMap<Object,ArrayList<Object>>>) getRecord("agentRelationships",this,parameterClazzes,parameters) ;
        //prepareAgentRelationshipsRecord(relationshipClassNames, backYears, backMonths, backDays) ;
        
        for (String relationshipClassName : relationshipClassNames)
        {
            HashMap<Object,ArrayList<Object>> agentRelationships 
                    = agentRelationshipsRecord.get(relationshipClassName) ;
            numberRelationshipsReport.put(relationshipClassName, agentRelationships.keySet().size()) ;
        }
        return numberRelationshipsReport ;
    }
    
    /**
     * First count the number of Relationships each Agent has entered up to now,
     * then subtract those which have broken up.
     * TODO: Redo to account for burn-in relationships.
     * @return Each record gives relationshipClassName maps to 
     * (the number of current Relationships for each Agent).
     */
    public ArrayList<HashMap<Object,HashMap<Object,Integer>>> prepareAgentNumberRelationshipsReport(String[] relationshipClassNames) 
    {
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentNumberRelationshipsReport 
                = new ArrayList<HashMap<Object,HashMap<Object,Integer>>>() ;
        
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentEnterRelationshipsReport 
                = new ArrayList<HashMap<Object,HashMap<Object,Integer>>>() ;
        
        ArrayList<HashMap<Object,HashMap<Object,Integer>>> agentBreakupRelationshipsReport 
                = new ArrayList<HashMap<Object,HashMap<Object,Integer>>>() ;
        
        // ArrayList of relationshipClassName maps to (agentId maps to relationshipIds)
        ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> agentsEnteredRelationshipReport 
                = prepareAgentsEnteredRelationshipReport(relationshipClassNames) ;
        
        // relationshipId maps to relationshipClassName ;
        HashMap<Object,String> relationshipClazzReport = prepareRelationshipClazzReport() ;
        
        
        ArrayList<String> breakupReport = (ArrayList<String>) getReport("breakup",this) ; //   prepareBreakupReport() ;
    
        // relationshipClassName maps to (agentId maps to relationshipIds)
        HashMap<Object,HashMap<Object,ArrayList<Object>>> agentRelationships 
                = new HashMap<Object,HashMap<Object,ArrayList<Object>>>() ;
        for (Object relationshipClassName : relationshipClassNames)
            agentRelationships.put(relationshipClassName, new HashMap<Object,ArrayList<Object>>()) ;
        
        //LOGGER.log(Level.INFO, "{0}", agentsEnteredRelationshipReport);
        int reportsSize = agentsEnteredRelationshipReport.size() ;
        
        // RelationshipClassName maps to (agentId maps to Relationship count) 
        HashMap<Object,HashMap<Object,Integer>> agentRelationshipsCount = new HashMap<Object,HashMap<Object,Integer>>() ;
        for (Object relationshipClassName : relationshipClassNames)
            agentRelationshipsCount.put(relationshipClassName, new HashMap<Object,Integer>()) ;
        
        for (int enteredIndex = 0 ; enteredIndex < reportsSize ; enteredIndex++ )
        {
            for (Object relationshipClassName : relationshipClassNames)
            {    
                // Formation of new Relationships
                HashMap<Object,HashMap<Object,ArrayList<Object>>> enteredRecord 
                        = agentsEnteredRelationshipReport.get(enteredIndex) ;
                
                HashMap<Object,ArrayList<Object>> agentsRelationshipClassRecord 
                        = enteredRecord.get(relationshipClassName) ;
                
                if (agentsRelationshipClassRecord.size() > 0)
                    for (Object agentId : agentsRelationshipClassRecord.keySet())
                    {
                        //LOGGER.info(String.valueOf(agentId)) ;
                        // Number of new Relationships
                        int newTotal = agentsRelationshipClassRecord.get(agentId).size() ;

                        // Plus ones already formed
                        if (agentRelationshipsCount.get(relationshipClassName).containsKey(agentId))
                            newTotal += agentRelationshipsCount.get(relationshipClassName).get(agentId) ;
                        agentRelationshipsCount.get(relationshipClassName).put(agentId, newTotal) ;
                        //LOGGER.log(Level.INFO, "{0}", agentRelationshipsCount);

                        for (Object relationshipId : agentsRelationshipClassRecord.get(agentId))
                            agentRelationships.put(relationshipClassName, 
                                    updateHashMap(relationshipId,agentId,agentRelationships.get(relationshipClassName))) ;
                    }
            }
            HashMap<Object,HashMap<Object,Integer>> enterAgentRelationshipsCount = (HashMap<Object,HashMap<Object,Integer>>) agentRelationshipsCount.clone() ;
            agentEnterRelationshipsReport.add(enterAgentRelationshipsCount) ;
        }
        
        // relationshipCLassName maps to (Count number of broken-up Relationships of each Agent.)
        HashMap<Object,HashMap<Object,Number>> agentBreakupsCount 
                = new HashMap<Object,HashMap<Object,Number>>() ;
        for (String relationshipClassName : relationshipClassNames)
            agentBreakupsCount.put(relationshipClassName, new HashMap<Object,Number>()) ;
        
        for (int breakupIndex = 0 ; breakupIndex < (reportsSize-1) ; breakupIndex++ )
        {
            // Formation of new Relationships
            String breakupRecord = breakupReport.get(breakupIndex) ; // agentsBreakupRelationshipReport.get(breakupIndex) ;
            //for (Object agentId : breakupRecord.keySet())
            for (Object relationshipId : extractAllValues(RELATIONSHIPID,breakupRecord,0)) 
            {
                // Relationship breakups
                Object relationshipClassName = extractValue("relationship",relationshipClazzReport.get(relationshipId)) ;
                
                for (Object agentId : agentRelationships.get(relationshipClassName).get(relationshipId))
                {
                //int subtractTotal = breakupRecord.get(agentId).size() ;
                    agentBreakupsCount.put(relationshipClassName,incrementHashMap(agentId,agentBreakupsCount.get(relationshipClassName))) ;
                
//                if (agentBreakupsCount.containsKey(agentId))
//                {
//                    // Plus ones already formed
//                    subtractTotal += agentBreakupsCount.get(agentId) ;
//                }
//                agentBreakupsCount.put(agentId, subtractTotal) ;
                }
            
            }
            agentBreakupRelationshipsReport.add((HashMap<Object,HashMap<Object,Integer>>) agentBreakupsCount.clone()) ;
        }
        
        // Subtract broken-up Relationships from commenced Relationships for each Agent.
        for (int breakupIndex = 0 ; breakupIndex < (reportsSize-1) ; breakupIndex++ )
        {
            HashMap<Object,HashMap<Object,Integer>> numberRelationshipsCount = new HashMap<Object,HashMap<Object,Integer>>() ;
            HashMap<Object,HashMap<Object,Integer>> enterRecord = agentEnterRelationshipsReport.get(breakupIndex+1) ;
            HashMap<Object,HashMap<Object,Integer>> breakupRecord = agentBreakupRelationshipsReport.get(breakupIndex) ;
            
            for (Object relationshipClassName : relationshipClassNames)
            {
                numberRelationshipsCount.put(relationshipClassName, new HashMap<Object,Integer>()) ;
                for (Object agentId : breakupRecord.get(relationshipClassName).keySet())
                {
    //                if (!enterRecord.containsKey(agentId))
    //                    continue ;  // Relationship entered during burn-in
                    try
                    {
                        numberRelationshipsCount.get(relationshipClassName).
                                put(agentId, enterRecord.get(relationshipClassName).get(agentId) - breakupRecord.get(relationshipClassName).get(agentId)) ;
                    }
                    catch (Exception e)
                    {
                        LOGGER.info(String.valueOf(agentId));
                        numberRelationshipsCount.get(relationshipClassName).
                                put(agentId, enterRecord.get(relationshipClassName).get(agentId) - breakupRecord.get(relationshipClassName).get(agentId)) ;
                    }
                }
            }
            agentNumberRelationshipsReport.add((HashMap<Object,HashMap<Object,Integer>>) numberRelationshipsCount.clone()) ;
        }
        return agentNumberRelationshipsReport ;
    }
    
    /**
     * Indicates which Agents were infected at which Sites for which cycles.
     * TODO: Adapt to multiple Report files
     * @param siteNames
     * @return HashMap key agentId, value HashMap key siteName value ArrayList of cycles when infected
     */
    public HashMap<Object,HashMap<Object,ArrayList<Object>>> prepareAgentInfectionReport(String[] siteNames)
    {
        return prepareAgentInfectionReport(siteNames,0,0,getBackCycles(0,0,getMaxCycles())) ;
    }
    
    /**
     * Indicates which Agents were infected at which Sites for which cycles.
     * TODO: Adapt to multiple Report files
     * @param siteNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return HashMap key agentId, value HashMap key siteName value ArrayList of cycles when infected
     */
    public HashMap<Object,HashMap<Object,ArrayList<Object>>> 
        prepareAgentInfectionReport(String[] siteNames, int backYears, int backMonths, int backDays)
    {
        HashMap<Object,HashMap<Object,ArrayList<Object>>> agentInfectionReport = new HashMap<Object,HashMap<Object,ArrayList<Object>>>() ;

        int backCycles = getBackCycles(backYears, backMonths, backDays) ;
        int maxCycles = getMaxCycles() ;
        int startCycle = maxCycles - backCycles ;
        int infectionCycle ;
        ArrayList<String> backCyclesReport = getBackCyclesReport(backYears, backMonths, backDays, maxCycles) ;

        for (int recordIndex = 0 ; recordIndex < backCycles ; recordIndex++ )
        {
            String record = backCyclesReport.get(recordIndex) ; 
            ArrayList<String> agentIdArray = extractArrayList(record,AGENTID) ;
            for ( String agentString : agentIdArray )
            {
                String agentId = extractValue(AGENTID,agentString) ;
                //siteInfectionReport = agentInfectionReport.get(agentId) ;
                infectionCycle = startCycle + recordIndex ;
                for ( String siteName : siteNames )
                    if (record.indexOf(siteName) > 0 )
                        agentInfectionReport = updateHashMap(agentId,siteName,infectionCycle,agentInfectionReport) ;
            }
        }
        return agentInfectionReport ;
    }
    
    /**
     * 
     * @param relationshipClassNames
     * @return Each record is a HashMap indicating new relationshipIds for relevant (key) Agents
     */
    public ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> 
        prepareAgentsEnteredRelationshipReport(String[] relationshipClassNames)
    {
        int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
        return prepareAgentsEnteredRelationshipReport(relationshipClassNames,0,0,endCycle,endCycle) ;
    }
        
    public ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> 
        prepareAgentsEnteredRelationshipReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays)
    {
        int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
        return prepareAgentsEnteredRelationshipReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
    }
    
    
    /**
     * 
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @param endCycle
     * @return Each record is a HashMap where relationshipClassName maps to a 
     * HashMap indicating new relationshipIds for relevant (key) Agents
     */
    public ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> 
        prepareAgentsEnteredRelationshipReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle)
    {
        ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> agentsEnteredRelationshipReport 
                = new ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>>() ; 
        
        HashMap<Object,String[]> relationshipAgentReport 
                = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // prepareRelationshipAgentReport() ; 
        
        // How many cycles far back do we count back from endCycle?
        int backCycles = getBackCycles(backYears, backMonths, backDays, endCycle) ;
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        HashMap<Object,HashMap<Object,ArrayList<Object>>> commenceRelationshipRecord 
                = new HashMap<Object,HashMap<Object,ArrayList<Object>>>();
        for (String relationshipClassName : relationshipClassNames)
            commenceRelationshipRecord.put(relationshipClassName, new HashMap<Object,ArrayList<Object>>()) ;
        
        for (int recordIndex = endCycle - 1 ; recordIndex >= (endCycle - backCycles) ; recordIndex-- )
        {
            String record = commenceReport.get(recordIndex) ;
            
            commenceRelationshipRecord = new HashMap<Object,HashMap<Object,ArrayList<Object>>>();
            for (String relationshipClassName : relationshipClassNames)
                commenceRelationshipRecord.put(relationshipClassName, new HashMap<Object,ArrayList<Object>>()) ;
            ArrayList<String> relationshipIdArray = extractArrayList(record,RELATIONSHIPID) ;
            for (String relationshipString : relationshipIdArray)
            {
                Object relationshipIdValue = extractValue(RELATIONSHIPID,relationshipString) ;
                String relationshipClassName = extractValue("relationship",relationshipString) ;
                if (!commenceRelationshipRecord.containsKey(relationshipClassName)) 
                {
                    LOGGER.info("commenceRelationshipRecord does not contain key " + relationshipClassName) ;
                    continue ;
                }
                Object[] agentIdValues = relationshipAgentReport.get(relationshipIdValue) ; 
                
                //String agentId0Value = extractValue(AGENTID0,relationshipString) ;
                commenceRelationshipRecord.put(relationshipClassName,
                        updateHashMap(agentIdValues[0],relationshipIdValue,commenceRelationshipRecord.get(relationshipClassName))) ;
                
                //String agentId1Value = extractValue(AGENTID1,relationshipString) ;
                commenceRelationshipRecord.put(relationshipClassName,
                        updateHashMap(agentIdValues[1],relationshipIdValue,commenceRelationshipRecord.get(relationshipClassName))) ;
            }
            
            agentsEnteredRelationshipReport.add(0,(HashMap<Object,HashMap<Object,ArrayList<Object>>>) commenceRelationshipRecord.clone()) ;
            
        }
        return agentsEnteredRelationshipReport ;
    }
        
    
    /**
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) Relationship class maps to number of Agents entering such
     * Relationship during given time.
     */
    public HashMap<Object,Number> 
        prepareNumberAgentsEnteredRelationshipReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays)
        {
            int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            
            return prepareNumberAgentsEnteredRelationshipReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        }
    
    /**
     * TODO: Change entering to being in
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @param endCycle
     * @return (HashMap) Relationship class maps to number of Agents entering such
     * Relationship during given time.
     */
    public HashMap<Object,Number> 
        prepareNumberAgentsEnteredRelationshipReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle)
    {
        HashMap<Object,Number> agentsEnteredRelationshipReport = new HashMap<Object,Number>() ;
        
        // (HashMap) relationshipClassName maps to (agentIds maps to number of new Relationships in given time).
        HashMap<Object,HashMap<Object,Integer>> numberRecentRelationshipsReport 
                = prepareNumberRecentRelationshipsReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        
        double population = Double.valueOf(getMetaDatum("Community.POPULATION")) ;
        
        for (Object relationshipClassName : relationshipClassNames )  // numberRecentRelationshipsReport.keySet())
            agentsEnteredRelationshipReport.put(relationshipClassName, numberRecentRelationshipsReport.get(relationshipClassName).keySet().size()/population) ;
    
        return agentsEnteredRelationshipReport ;
    }
    
    /**
     * 
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @param lastYear
     * @return year-by-year Report of numbers of Agents entering each Relationship Class
     */
    public HashMap<Object,Number[]> 
        prepareNumberAgentsEnteredRelationshipYears(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int lastYear)
        {
            HashMap<Object,Number[]> numberAgentsEnteredRelationshipYears = new HashMap<Object,Number[]>() ;
            
            int maxCycles = getMaxCycles() ;
            
            int endCycle ;
            HashMap<Object,Number> numberAgentsEnteredRelationship ;
            for (int year = 0 ; year < backYears ; year++ )
            {
                Number[] yearlyNumberAgentsEnteredRelationship = new Number[relationshipClassNames.length] ;
               
                endCycle = maxCycles - year * DAYS_PER_YEAR ;
                numberAgentsEnteredRelationship = prepareNumberAgentsEnteredRelationshipReport(relationshipClassNames, 0, backMonths, backDays, endCycle);
               
                for (int classIndex = 0 ; classIndex < relationshipClassNames.length ; classIndex++ )
                    yearlyNumberAgentsEnteredRelationship[classIndex] = numberAgentsEnteredRelationship.get(relationshipClassNames[classIndex]) ;
                
                numberAgentsEnteredRelationshipYears.put(lastYear - year, (Number[]) yearlyNumberAgentsEnteredRelationship.clone()) ;
            }
            
            return numberAgentsEnteredRelationshipYears ;
        }
    
    /**
     * Filters Relationships in fullReport records to be class relationshipClazzName
     * @param relationshipClazzName
     * @param fullReport
     * @return 
     */
    protected ArrayList<String> filterRelationshipClazzReport(String relationshipClazzName, ArrayList<String> fullReport)
    {
        if (relationshipClazzName.isEmpty())
            return fullReport ;
        
        ArrayList<String> relationshipClazzReport = new ArrayList<String>() ;
        
        HashMap<Object,String> relationshipReport = prepareRelationshipClazzReport() ;
        String relationshipId ;
        String filteredRecord ;
        
        for (String record : fullReport)
        {
            filteredRecord = "" ;
            ArrayList<String> encounterRecords = extractArrayList(record,RELATIONSHIPID) ;
            for (String encounter : encounterRecords)
            {
                relationshipId = extractValue(RELATIONSHIPID,encounter) ; 
                if (compareValue("relationship",relationshipClazzName,relationshipReport.get(relationshipId))) 
                    filteredRecord = filteredRecord + encounter ;
            }
            relationshipClazzReport.add(filteredRecord) ;
        }
        
        return relationshipClazzReport ;
    }
    
    /**
     * Filters Relationship entries in fullReport to be con/dis-cordant with respect
     * to propertyName.
     * @param propertyName
     * @param concordant
     * @param fullReport
     * @return (ArrayList) String records including only appropriately con/dis-cordant
     * Relationship entries
     */
    protected ArrayList<String> filterByConcordance(String propertyName, boolean concordant, ArrayList<String> fullReport)
    {
        if (propertyName.isEmpty())
            return fullReport ;
        
        ArrayList<String> filteredReport = new ArrayList<String>() ;
        
        String filteredRecord ;
        
        HashMap<Object,String> relationshipConcordanceReport = prepareRelationshipConcordanceReport(propertyName) ;
        
        for (String fullRecord : fullReport)
        {
            ArrayList<String> relationshipList = extractArrayList(fullRecord,RELATIONSHIPID) ;
            filteredRecord = "" ;
            
            for (String relationshipEntry : relationshipList)
            {
                String relationshipId = extractValue(RELATIONSHIPID,relationshipEntry) ;
                String concordanceString = relationshipConcordanceReport.get(relationshipId) ;
                if (compareValue(propertyName,String.valueOf(concordant),concordanceString))
                    filteredRecord += relationshipEntry ;
            }
            filteredReport.add(filteredRecord) ;
        }
        return filteredReport ;
    }
    
    /**
     * Prepares report on whether Agents in a Relationship are concordant with 
     * regards to propertyName.
     * @param propertyName
     * @return (HashMap) relationshipId maps to String describing boolean concordance
     * of propertName between involved Agents.
     */
    public HashMap<Object,String> prepareRelationshipConcordanceReport(String propertyName)
    {
        HashMap<Object,String> relationshipConcordanceReport = new HashMap<Object,String>() ; 
        String concordanceString ;
        
        HashMap<Object,String[]> relationshipAgentReport 
                = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // prepareRelationshipAgentReport() ; 
        // (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; // 
        
        ArrayList<String[]> relationshipAgentsList = new ArrayList<String[]>() ;
        
        PopulationReporter populationReporter = new PopulationReporter(simName,getFolderPath()) ;
        
        HashMap<String[],Boolean> concordanceBoolean ;
        
        for (String[] pair : relationshipAgentReport.values())
            relationshipAgentsList.add(pair) ;
        
        concordanceBoolean = populationReporter.getConcordants(propertyName,relationshipAgentsList) ;
        
        for (Object relationshipId : relationshipAgentReport.keySet())
        {
            String[] concordanceKey = relationshipAgentReport.get(relationshipId) ;
            concordanceString = Reporter.addReportProperty(propertyName, concordanceBoolean.get(concordanceKey)) ;
            relationshipConcordanceReport.put(relationshipId, concordanceString) ;
        }
        
        return relationshipConcordanceReport ;
    }
    
    /**
     * 
     * @return (HashMap) relationshipId maps to String describing boolean concordance between
     * involved Agents.
     */
    public HashMap<Object,String> prepareRelationshipConcordantsReport()
    {
        HashMap<Object,String> relationshipConcordantsReport = new HashMap<Object,String>() ;
        
        HashMap<Object,String[]> relationshipAgentReport 
                = (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; //  prepareRelationshipAgentReport() ; 
        // (HashMap<Object,String[]>) getReport("relationshipAgent",this) ; //  ;
        
        String concordantOutput ;
        String value0 ;
                
        PopulationReporter populationReporter = new PopulationReporter(simName,getFolderPath()) ;
        
        // Identify census properties for all Agents.
        HashMap<Object,String> censusPropertyReport = populationReporter.prepareCensusPropertyReport() ;
        
        ArrayList<String> censusProperties = identifyProperties(censusPropertyReport.get("0")) ;
        for (Object relationshipId : relationshipAgentReport.keySet())
        {
            String[] agentIds = relationshipAgentReport.get(relationshipId) ;
            String censusRecord0 = censusPropertyReport.get(agentIds[0]) ;
            String censusRecord1 = censusPropertyReport.get(agentIds[1]) ;
            concordantOutput = "" ;
            for (String propertyName : censusProperties)
            {
                value0 = extractValue(propertyName,censusRecord0);
                concordantOutput += addReportProperty(propertyName,compareValue(propertyName,value0,censusRecord1)) ;
            }
            relationshipConcordantsReport.put(relationshipId, concordantOutput) ;
        }
        return relationshipConcordantsReport ;
    }
    
    /**
     * 
     * @return (HashMap) relationshipId maps to relationship.subclass.getName()
     */
    protected HashMap<Object,String> prepareRelationshipClazzReport()
    {
        HashMap<Object,String> relationshipClazzReport = new HashMap<Object,String>() ; 
        
        ArrayList<String> commenceReport = (ArrayList<String>) getReport("commence",this) ; //  prepareCommenceReport() ;
        
        String relationshipId ;
        String relationshipClassName ;
        
        for (String record : commenceReport)
        {
            ArrayList<String> relationshipEntries = extractArrayList(record,RELATIONSHIPID) ;
            
            for (String entry : relationshipEntries)
            {
                relationshipId = extractValue(RELATIONSHIPID,entry);
                relationshipClassName = extractValue("relationship",entry) ;
                relationshipClazzReport.put(relationshipId,relationshipClassName) ;
            }
        }
        
        return relationshipClazzReport ;
    }
    
    /**
     * 
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) number of new Relationships in given period maps to number
     * of Agents who had that many Relationships during that period.
     */
    public HashMap<Object,HashMap<Object,Number>> 
        prepareRecentRelationshipsReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays)
        {
            int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            
            return prepareRecentRelationshipsReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        }

    
    /**
     * 
     * @param relationshipClassNames
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) number of new Relationships in given period maps to number
     * of Agents who had that many Relationships during that period.
     */
    public HashMap<Object,HashMap<Object,Number>> 
        prepareRecentRelationshipsReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle)
    {
        HashMap<Object,HashMap<Object,Number>> recentRelationshipsReport = new HashMap<Object,HashMap<Object,Number>>() ; 
         
        // (HashMap) agentIds maps to number of new Relationships in given time.
        HashMap<Object,HashMap<Object,Integer>> numberRecentRelationshipsReport 
                  = prepareNumberRecentRelationshipsReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        
        // How many cycles far back do we count?
        int maxCycles = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
        int backCycles = getBackCycles(backYears, backMonths, backDays, maxCycles) ;
        
        PopulationReporter populationReporter = new PopulationReporter(simName,getFolderPath()) ;
        ArrayList<Object> agentsAlive = populationReporter.prepareAgentsAliveRecord(backCycles) ;
        
        int newRelationships ;
        
        for (Object relationshipClassName : numberRecentRelationshipsReport.keySet())
        {
            for (Object agentId : agentsAlive)
            {
                if (numberRecentRelationshipsReport.get(relationshipClassName).keySet().contains(agentId))
                    newRelationships = numberRecentRelationshipsReport.get(relationshipClassName).get(agentId);
                else
                    newRelationships = 0 ;

                recentRelationshipsReport.put(relationshipClassName,
                        incrementHashMap((Object) newRelationships,recentRelationshipsReport.get(relationshipClassName))) ;
            }
        }
          
        return recentRelationshipsReport ;
    }
        
    private HashMap<Object,HashMap<Object,Integer>> 
        prepareNumberRecentRelationshipsReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays)
        {
            int endCycle = Integer.valueOf(getMetaDatum("Community.MAX_CYCLES")) ;
            
            return prepareNumberRecentRelationshipsReport(relationshipClassNames, backYears, backMonths, backDays, endCycle) ;
        }
    
    /**
     * 
     * @param backYears
     * @param backMonths
     * @param backDays
     * @return (HashMap) relationshipClassName maps to 
     * (agentIds maps to number of new Relationships in given time).
     */
    private HashMap<Object,HashMap<Object,Integer>> 
        prepareNumberRecentRelationshipsReport(String[] relationshipClassNames, int backYears, int backMonths, int backDays, int endCycle)
    {
        HashMap<Object,HashMap<Object,Integer>> numberRecentRelationshipsReport = new HashMap<Object,HashMap<Object,Integer>>() ;
        for (String relationshipClassName : relationshipClassNames)
            numberRecentRelationshipsReport.put(relationshipClassName, new HashMap<Object,Integer>()) ;
        
        // Each record is a HashMap indicating new relationshipIds for relevant (key) Agents
        ArrayList<HashMap<Object,HashMap<Object,ArrayList<Object>>>> agentsEnteredRelationshipReport 
                = prepareAgentsEnteredRelationshipReport(relationshipClassNames,backYears,backMonths,backDays, endCycle) ;
        int newRelationships ;
                
        for (HashMap<Object,HashMap<Object,ArrayList<Object>>> record : agentsEnteredRelationshipReport)
            for (Object relationshipClassName : record.keySet())
                for (Object agentId : record.get(relationshipClassName).keySet())
                {
                    newRelationships = record.get(relationshipClassName).get(agentId).size();
                    numberRecentRelationshipsReport.put(relationshipClassName,
                            updateHashMap(agentId,newRelationships,numberRecentRelationshipsReport.get(relationshipClassName))) ;
                }
            
        return numberRecentRelationshipsReport ;
    }
    
    /**
     * 
     * @return (HashMap) indicating breakup of relationshipIds for relevant (key) agentIds
     */
    private HashMap<Object,ArrayList<Object>> prepareAgentsBreakupRelationshipReport(int backYears, int backMonths, int backDays)
    {
        HashMap<Object,ArrayList<Object>> agentsBreakupRelationshipRecord 
                = new HashMap<Object,ArrayList<Object>>() ;
            
        ArrayList<String> breakupReport = (ArrayList<String>) getReport("breakup",this) ; //  prepareBreakupReport() ;
        
        for (String record : breakupReport)
        {
            ArrayList<String> relationshipIdArray = extractArrayList(record,RELATIONSHIPID) ;
            for (String relationshipString : relationshipIdArray)
            {
                String relationshipIdValue = extractValue(RELATIONSHIPID,relationshipString) ;
                
                String agentId0Value = extractValue(AGENTID0,relationshipString) ;
                if (!agentId0Value.isEmpty())
                    agentsBreakupRelationshipRecord = updateHashMap(agentId0Value,relationshipIdValue,agentsBreakupRelationshipRecord,false) ;
                
                String agentId1Value = extractValue(AGENTID1,relationshipString) ;
                if (!agentId1Value.isEmpty())
                    agentsBreakupRelationshipRecord = updateHashMap(agentId1Value,relationshipIdValue,agentsBreakupRelationshipRecord,false) ;
            }
        }
        return agentsBreakupRelationshipRecord ;
    }
    
    /**
     * 
     * @return Report with breakup-relevant information from input records.
     */
    protected ArrayList<String> prepareBreakupReport()
    {
        ArrayList<String> breakupReport = new ArrayList<String>() ;
        
        String record ;
        
        // Loop through records in saved files
        for (boolean nextInput = true ; nextInput ; nextInput = updateReport() )
            for (int recordNb = 0 ; recordNb < input.size() ; recordNb += outputCycle )
            {
                record = input.get(recordNb) ;
                record = record.substring(record.indexOf("clear:")) ;
                //LOGGER.log(Level.INFO, "{0} {1}", new Object[] {recordNb,record});

                breakupReport.add(record) ;
            }
        return breakupReport ;
    }
    
    /**
     * 
     * @return Report with commence-relevant information from input records.
     * Includes Relationships commenced during burn-in that breakup during the
     * simulation.
     */
    protected ArrayList<String> prepareCommenceReport()
    {
        ArrayList<String> commenceReport = new ArrayList<String>() ;
        
        String record ;
        
        //Include burn-in Relationships
        ArrayList<String> inputString = new ArrayList<String>() ;
        //LOGGER.info(Relationship.BURNIN_COMMENCE) ;
        
        // Read in Relationship commencements from simulation.
        for (boolean nextInput = true ; nextInput ; nextInput = updateReport() )
            for (String inputRecord : input)
                inputString.add(inputRecord) ;
        
        record = "0," + prepareBurninRecord() ;
        if (!record.isEmpty())
        {
            record += inputString.get(0).substring(2) ; // Leave out the "0," from the report
            inputString.set(0, record) ;
        }
        //    inputString.add(record + "clear:") ;
        

        for (int reportNb = 0 ; reportNb < inputString.size() ; reportNb += outputCycle )
        {
            record = inputString.get(reportNb) ;
            int relationshipIdIndex = indexOfProperty(RELATIONSHIPID,record) ;
            int clearIndex = indexOfProperty("clear",record) ;
            if (relationshipIdIndex >= 0 && (relationshipIdIndex < clearIndex)) 
                commenceReport.add(record.substring(relationshipIdIndex,clearIndex)) ;
            else
                commenceReport.add("") ;
        }
        return commenceReport ;
    }
    
    /**
     * 
     * @return (String) replacement of Relationship.BURNIN_COMMENCE including only 
     * Relationships which have not broken up.
     */
    private String prepareBurninRecord()
    {
        
        String burninCommence = "" ;
        String burninCommenceStatic = Relationship.BURNIN_COMMENCE ;
        String burninBreakupStatic = Relationship.BURNIN_BREAKUP ;
        ArrayList<String> burninCommenceList ;
        ArrayList<Object> burninBreakup ;
        String relationshipId ;
        
        // Get relationshipIds commenced during burn-in
        if (burninBreakupStatic.isEmpty())    // If nothing in Relationship.BURNIN_COMMENCE
        {
            burninCommenceStatic = getMetaDatum("Relationship.BURNIN_COMMENCE") ;
            burninBreakupStatic = getMetaDatum("Relationship.BURNIN_BREAKUP") ;
        }
        burninCommenceList = extractArrayList(burninCommenceStatic,RELATIONSHIPID) ;
        burninBreakup = extractAllValues(RELATIONSHIPID,burninBreakupStatic,0) ;
        
        for (String relationshipEntry : burninCommenceList)
        {
            relationshipId = extractValue(RELATIONSHIPID,relationshipEntry) ;
            if (!burninBreakup.contains(relationshipId))
                burninCommence += relationshipEntry ;
        }
        
        //burninCommence += "clear:" ;
        return burninCommence ;
    }
    
}
